+myPacksToLoad<-c("twitteR","SocialMediaMineR","ROAuth","ggmap","RJSONIO","tm","rcurl","plyr","dplyr","wordcloud","RTextTools",
+                   "e1071","rparty","instaR","stringr","knn","shiny")
+
+lapply(myPacksToLoad,require,character.only=TRUE)
+
+twitterCredentials<-setup_twitter_oauth(consumer_key="some consumer key",
+                                           consumer_secret="some consumer secret",
+                                               access_token="some access token",
+                                                  access_secret="some access secret")
+#define search criteria of the search string chosen,with cordinates of the respective counties
+#for geotagging and later geomapping on a shiny app.
+
+lats=c(0.4897,0.7856,0.5695,0.4608,0.6726,0.5388,0.4532,0.535,
+         0.3556,2.0981,0.2827,0.3689,1.1748,3.5107,0.5732,0.6773,	
+               0.0917,1.3751,4.1816,0.397,2.2696,1.5177,1.7865,3.9356,	
+                   0.0515,1.0707,2.3355,4.0435,0.7957,1.2921,0.3031,0.1036,1.0875,	
+                         0.5669,0.3994,0.4278,1.2571,0.0998,3.3854,1.5868,0.157,1.0219,3.1184,	
+                                         0.5143,0.0816,1.7488,1.5924)
+
+lons=c(35.7412,35.3391,34.5584,34.1115,35.508,37.4596,39.6461,
+         34.4531,37.5833,36.782,34.7519,35.2863,36.8304,39.9093,37.3255,
+                  34.7796,34.768,37.9952,39.4606,37.1588,40.9006,37.2634,37.6311,	
+                       41.8551,37.6456,34.4753,37.9943,39.6682,37.1322,36.8219,36.08,	
+                            35.1777,35.8771,34.9341,36.4895,36.9434,37.1768,34.2747,38.5659,	
+                                   39.4424,37.9782,35.0015,35.5988,35.2697,34.7229,40.0586,35.2854)
+
+#Define the Kenya 2017 election enetities of interest and execute the search script
+N=100000 #Number of tweets
+S=100 #Radius
+
+entity1KE<-try(do.call(rbind,lapply(1:length(lats), function(i) searchTwitter("string",
+               lang=NULL,n=N,resultType="recent",
+                             retryOnRateLimit=120,
+                                geocode=paste(lats[i],lons[i],paste0(S,"kms"),sep=",")))))
+
+#Tweets cleaning and formatting
+entity1KE<-twListToDF(entity1KE)
+#Create Tweets corpus
+entity1KECorpus <- Corpus(VectorSource(entity1KE$text))
+
+tm_map(myCorpus,function(x) iconv(enc2utf8(x),sub="byte"))
+
+entity1KECorpus <- tm_map(entity1KECorpus, tolower)
+
+entity1KECorpus <- tm_map(entity1KECorpus, removePunctuation) 
+
+entity1KECorpus <- tm_map(entity1KECorpus, removeNumbers)
+
+removeUrl<- function(x)gsub("http[[:alnum:]]*","",x)
+
+entity1KECorpus <- tm_map(entity1KE,content_transformer(removeUrl))
+
+entity1KECorpus <- tm_map(documents, removeWords, stopwords('english'))
+
+entity1KEtdm <- create_matrix(entity1KECorpus)
+
+container = create_container(entity1KEtdm, as.numeric(as.factor(entity1KECorpus[,2])),
+                               trainSize=1:n, testSize=n+1:k,virgin=FALSE)
+
+#Multiple model classification and selecting most effective
+models = train_models(container, algorithms=c("MAXENT" , "SVM", "RF", "BAGGING", "TREE"
+                                                "GLMNET", "SLDA", "BOOSTING", "NNET"))
+results = classify_models(container, list_of_trained_models)
+
+#Viewing performance results for each model
+table(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"MAXENTROPY_LABEL"])
+table(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"SVM_LABEL"])
+table(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"RF_LABEL"])
+table(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"BAGGING_LABEL"])
=table(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"TREE_LABEL"])
+table(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"GLMNET_LABEL"])
+table(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"SLDA_LABEL"])
+table(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"BOOSTING_LABEL"])
+table(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"NNET_LABEL"])

#Viewing recall accuracy for each model tested
+recall_accuracy(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"MAXENTROPY_LABEL"])
+recall_accuracy(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"SVM_LABEL"])
+recall_accuracy(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"RF_LABEL"])
+recall_accuracy(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"BAGGING_LABEL"])
+recall_accuracy(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"TREE_LABEL"])
+recall_accuracy(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"GLMNET_LABEL"])
+recall_accuracy(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"SLDA_LABEL"])
+recall_accuracy(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"BOOSTING_LABEL"])
+recall_accuracy(as.numeric(as.factor(tweets[n+1:k, 2])), results[,"NNET_LABEL"])
